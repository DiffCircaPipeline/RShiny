data.frame(OriginalName = NA, GeneName = "VWA2", Uniprot = "Q5GFL6", Phase2ID = "vWF-A2...288", MatchName2 = "vWFA2dup"))
Combined_Proteomic_post_Venlafaxine2 = Combined_Proteomic_post_Venlafaxine
colnames(Combined_Proteomic_post_Venlafaxine2) = sapply(colnames(Combined_Proteomic_post_Venlafaxine2), function(a){
if(a%in%match.one.to.one2$Phase2ID){
idx = which(match.one.to.one2$Phase2ID==a)
aa = match.one.to.one2$OriginalName[idx]
if(is.na(aa)){
aa = match.one.to.one2$MatchName2[idx]
}else{
aa = match.one.to.one2$OriginalName[idx]
}
return(aa)
}else{
print(aa)
return(aa)
}
})
colnames(Combined_Proteomic_post_Venlafaxine2)
sum(is.na(colnames(Combined_Proteomic_post_Venlafaxine2)))
Combined_Proteomic_post_Venlafaxine2[Combined_Proteomic_post_Venlafaxine2=="-"] = NA
Combined_Proteomic_post_Venlafaxine2[1:5, 1:5]
rownames(Combined_Proteomic_post_Venlafaxine2) = paste0("X", rownames(Combined_Proteomic_post_Venlafaxine2))
write.csv(Combined_Proteomic_post_Venlafaxine2, paste0(hdir, "/data/phase2/phase2_data.csv"))
dim(Combined_Proteomic_post_Venlafaxine2) #327 subjects*343
write.csv(Combined_Proteomic_post_Venlafaxine2, paste0(hdir, "/data/phase2/clean_Combined_Proteomic_post_Venlafaxine.csv"))
phase2.meta = read.csv(paste0(hdir, "/data/phase2/IRL-GREY-Phase-2-Clinical-BMKs-ALL.csv"))
phase2.meta2 = phase2.meta[, 1:90]
phase2.data2 = phase2.meta[, 91:ncol(phase2.meta)] #dim: 181, 343
colnames(phase2.data2)
dim(phase2.data2)
phase2.data2[1:5, 1:5]
head(phase2.meta)
head(phase2.meta[, 1:5])
rownames(phase2.data2) = phase2.meta2$id
###
p.names = colnames(phase2.data2)
cbind(colnames(phase2.data2), colnames(Combined_Proteomic_post_Venlafaxine2))
colnames(phase2.data2) = colnames(Combined_Proteomic_post_Venlafaxine2)
phase2.data2[1:5, 1:5]
phase2.data2[phase2.data2=="-"] = NA
phase2.data2[1:5, 1:5]
write.csv(Combined_Proteomic_post_Venlafaxine2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-Data.csv"))
write.csv(match.one.to.one2, paste0(hdir, "/data/phase2/ProteinMatchingPhase1_2.csv"))
phase2.meta2[1:5, 1:5]
rownames(phase2.data2) = paste0("X", rownames(phase2.data2))
write.csv(Combined_Proteomic_post_Venlafaxine2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-Data.csv"))
write.csv(Combined_Proteomic_post_Venlafaxine2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"))
write.csv(phase2.data2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"))
write.csv(phase2.meta2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"))
write.csv(phase2.data2, paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"))
library(dplyr)
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2")
data.dir = paste0(hdir, "/data/phase2")
## Match the protein names with phase2 data --------------------------------
data1 = read.csv(paste0(hdir, "/data/Proteomic-File-IRL-MEDEX-BASELINE_correct.csv"), row.names = 1, check.names = F)
meta1.IRL = read.csv(paste0(hdir, "/data/medex_demographics[1].csv"))
meta1.MED = read.csv("./data/IRL-GREy Baseline_marked2.csv")
meta1.IRL2 = data1[, 1:5]
data1 = data1[, -c(1:5)]
data1 = read.csv(paste0(hdir, "/data/Proteomic-File-IRL-MEDEX-BASELINE_correct.csv"), row.names = 1, check.names = F)
meta1.IRL = read.csv(paste0(hdir, "/data/medex_demographics[1].csv"))
meta1.MED = read.csv(paste0(hdir, "/data/IRL-GREy Baseline_marked2.csv"))
meta1.IRL2 = data1[, 1:5]
data1 = data1[, -c(1:5)]
phase2.meta = read.csv(paste0(hdir, "/data/phase2/IRL-GREY-Phase-2-Clinical-BMKs-ALL.csv"))
phase2.meta2 = phase2.meta[, 1:90]
phase2.data = read.csv(paste0(hdir, "/data/phase2/clean_Combined_Proteomic_post_Venlafaxine.csv"))
phase2.data2 = read.csv(paste0(hdir, "/data/phase2/clean_Combined_Proteomic_post_Venlafaxine.csv"))
head(meta1.IRL)
head(meta1.MED)
head(meta1.IRL2)
phase2.meta = read.csv(paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"))
head(phase2.meta)
phase2.meta = read.csv(paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1)
phase2.data2 = read.csv(paste0(hdir, "/data/phase2/clean_Combined_Proteomic_post_Venlafaxine.csv"), row.names = 1)
phase2.data2[1:5, 1:5]
meta1.IRL[1:5, 1:5]
meta1.IRL = read.csv(paste0(hdir, "/data/medex_demographics[1].csv")); rownames(meta1.IRL) = paste0("X", meta1.IRL$participant_id)
head(meta1.MED)
meta1.MED = read.csv(paste0(hdir, "/data/IRL-GREy Baseline_marked2.csv")); rownames(meta1.MED) = paste0("X", meta1.MED$id)
head(meta1.IRL2)
rownames(meta1.IRL2) = paste0("X", meta1.IRL2$ID)
phase2.meta = read.csv(paste0(hdir, "/data/phase2/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1)
rownames(phase2.meta) = paste0("X", phase2.meta$id)
meta1.IRL = read.csv(paste0(hdir, "/data/IRL-GREy Baseline_marked2.csv")); rownames(meta1.IRL) = paste0("X", meta1.IRL$id)
meta1.MED = read.csv(paste0(hdir, "/data/medex_demographics[1].csv")); rownames(meta1.MED) = paste0("X", meta1.MED$participant_id)
samples = list(phase1.Baseline = rownames(meta1.IRL),
phase1.protein = rownames(meta1.IRL2),
phase2.clinical = rownames(phase2.meta),
phase2.more = rownames(phase2.data2))
VennDiagram::venn.diagram(samples)
?VennDiagram::venn.diagram
VennDiagram::venn.diagram(samples, NULL)
samples.venn = VennDiagram::venn.diagram(samples, NULL)
print(samples.venn)
samples.venn = VennDiagram::venn.diagram(samples, paste0(job.dir, "/samples_venn.tiff"))
samples.venn = VennDiagram::venn.diagram(samples[c(1, 3, 4)], paste0(job.dir, "/samples_venn.tiff"))
samples.venn = VennDiagram::venn.diagram(samples, paste0(job.dir, "/samples_venn.tiff"))
samples.venn = VennDiagram::venn.diagram(samples[c(1, 3, 4)], paste0(job.dir, "/samples_venn2.tiff"))
samples.venn = VennDiagram::venn.diagram(samples, paste0(job.dir, "/samples_venn.tiff"))
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
data.dir = paste0(hdir, "/data/phase2")
#load cleaned data
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"))
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
data.dir = paste0(hdir, "/data/phase2")
colnames(phase2.meta)
#load cleaned data
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"), row.names = 1)
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1)
colnames(phase2.meta)
summary(phase2.meta)
#load cleaned data
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"), row.names = 1)
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1)
summary(phase2.meta)
dim(phase2.meta)
phase2.meta$site
phase2.meta$cell
character.cols = apply(phase2.meta, 2, class)
character.cols
table(character.cols)
?summary
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1, stringsAsFactors = TRUE)
summary(phase2.meta)
table(phase2.meta$Tx, phase2.meta$response)
?select
summary(phase2.meta)
phase2.meta$education
phase2.meta$cir
phase2.meta$cnt
phase2.meta$icd9_diabetes
sum(phase2.meta$depstr=="")
sum(phase2.meta$depstr==" ")
c("icd9_hypertension", "aims_q8_rand")
phase2.meta$aims_q8_rand
phase2.meta2$final_remit
phase2.meta$sas_worsen_max
table(phase2.meta$sastot_max)
?getAssociationStatistics
??getAssociationStatistics
devtools::install_github('th1vairam/CovariateAnalysis@dev')
phase2.meta.toTbOne = phase2.meta[, !To.character.cols] %>% select(!id)
To.character.cols = c("stphase", "endphase", "first_response_date")
To.factor.cols = c("icd9_diabetes", "final_remit", "response", "sas_worsen_max", "aims_worsen_max", "barnes_worsen_max", "sas_worsen", "aims_worsen", "barnes_worsen", "stop_med")
To.character.cols = c("stphase", "endphase", "first_response_date")
phase2.meta[, To.factor.cols] = factor(phase2.meta[, To.factor.cols])
phase2.meta[, To.factor.cols] = apply(phase2.meta[, To.factor.cols], 2, factor)
phase2.meta.toTbOne = phase2.meta[, !To.character.cols] %>% select(!id)
phase2.meta.toTbOne = phase2.meta[, -To.character.cols] %>% select(!id)
phase2.meta.toTbOne = phase2.meta[, -c(To.character.cols)] %>% select(!id)
phase2.meta.toTbOne = phase2.meta[, !colnames(phase2.meta)%in%To.character.cols] %>% select(!id)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(COVARIATES, PVAL = 0.05)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(phase2.meta.toTbOne, PVAL = 0.05)
?corr.test
??corr.test
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(phase2.meta.toTbOne, PVAL = 0.05)
phase2.meta.toTbOne
#load cleaned data
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"), row.names = 1)
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1, stringsAsFactors = TRUE)
summary(phase2.meta)
table(phase2.meta$Tx, phase2.meta$response)
phase2.meat.missing = apply(phase2.meta, 2, is.na)
phase2.meat.missing
phase2.meat.missing = apply(phase2.meta, 2, function(a){mean(is.na(a))})
phase2.meat.missing
sum(phase2.meat.missing>0.4)
sum(phase2.meat.missing>0.5)
sum(phase2.meat.missing>0.2)
sum(phase2.meat.missing>0.1)
phase2.meta.missing = apply(phase2.meta, 2, function(a){mean(is.na(a))})
miss.gt.0.2.col = colnames(phase2.meta)[phase2.meta.missing>0.2]
miss.gt.0.2.col
To.factor.cols = c("icd9_diabetes", "final_remit", "response", "sas_worsen_max", "aims_worsen_max", "barnes_worsen_max", "sas_worsen", "aims_worsen", "barnes_worsen", "stop_med")
To.character.cols = c("stphase", "endphase", "first_response_date")
# cols.factor.or.integer = c("sis_rand", "barnes_rand", "sastot_rand", "aims_q8_rand", "sas_endph2", "barnes_endph2", "aims_q8_endph2", "barnes_max", "aims_q8_max", "sastot_max")
phase2.meta$depstr[phase2.meta$depstr==" "] = NA
phase2.meta.missing = apply(phase2.meta, 2, function(a){mean(is.na(a))})
miss.gt.0.2.col = colnames(phase2.meta)[phase2.meta.missing>0.2]
phase2.meta[, To.factor.cols] = apply(phase2.meta[, To.factor.cols], 2, factor)
phase2.meta.toTbOne = phase2.meta[, !colnames(phase2.meta)%in%c(To.character.cols, miss.gt.0.2.col)] %>% select(!id)
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(phase2.meta.toTbOne, PVAL = 0.05)
tmp = COVARIATES.CORRELATION$ESTIMATE
tmp[COVARIATES.CORRELATION$PVAL > 0.05] = 0
h = Heatmap(tmp, col = colorRamp2(c(-1,0,1), c('blue','white','red')), name = 'AssocEstimate')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
#covariate assocation
library(psych)
COVARIATES.CORRELATION = CovariateAnalysis::getAssociationStatistics(phase2.meta.toTbOne, PVAL = 0.05)
tmp = COVARIATES.CORRELATION$ESTIMATE
tmp[COVARIATES.CORRELATION$PVAL > 0.05] = 0
h = Heatmap(tmp, col = colorRamp2(c(-1,0,1), c('blue','white','red')), name = 'AssocEstimate')
ComplexHeatmap::draw(h, heatmap_legend_side = 'left')
tableone::CreateTableOne(data = phase2.meta.toTbOne)
xx = tableone::CreateTableOne(data = phase2.meta.toTbOne, strata = "Tx")
dim(xx)
xx
?tableone::CreateTableOne
xx
xx$MetaData
xx[, 1:4]
xx[, 1:3]
xx
xx2 = tableone::CreateTableOne(data = phase2.meta.toTbOne, strata = "Tx", test = FALSE)
xx
xx2
attributes(xx)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(psych)
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
data.dir = paste0(hdir, "/data/phase2")
miss.mat = is.na(phase2.data)
miss.mat[1:5, 1:5]
miss.rate.by.protein = colMeans(miss.mat)
hist(miss.rate.by.protein)
hist(miss.rate.by.protein)
quantile(miss.rate.by.protein)
sum(is.na(phase2.data[, 1]))
sum(is.na(phase2.data[, 2]))
mean(is.na(phase2.data[, 2]))
sum(miss.rate.by.protein==0)#290 proteins do not have missing, may be MNAR
dim(phase2.data)
data[, miss.rate.by.protein !=0][1:5, 1:5]
phase2.data[, miss.rate.by.protein !=0][1:5, 1:5]
class(data[, miss.rate.by.protein !=0][1, 1])#character
class(phase2.data[, miss.rate.by.protein !=0][1, 1])#character
miss.rate.by.sample = rowMeans(miss.mat)
hist(miss.rate.by.protein)
hist(miss.rate.by.protein)
hist(miss.rate.by.sample)
quantile(miss.rate.by.sample)
sum(miss.rate.by.sample==1)
install.packages("visdat")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(psych)
#install.packages("visdat")
library(visdat)
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
data.dir = paste0(hdir, "/data/phase2")
# pdf("./precheck/missing_visualization.pdf")
# vis_miss(data[, miss.rate.by.protein!=0])
# vis_dat(data[, miss.rate.by.protein!=0])
source("/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Analysis/precheck/missing/vis_miss2.R")
source("/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Analysis/precheck/missing/visdat_internal.R")
vis_miss(phase2.data)
rm(vis_miss())
rm(vis_miss)
vis_miss(phase2.data)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(psych)
#install.packages("visdat")
# library(visdat)
# source("/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Analysis/precheck/missing/vis_miss2.R")
# source("/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Analysis/precheck/missing/visdat_internal.R")
hdir = "/Users/xiangningxue/OneDrive - University of Pittsburgh/Research/Diniz/proteomics"
job.dir = paste0(hdir, "/phase2/CleanAndPreprocessing")
data.dir = paste0(hdir, "/data/phase2")
phase2.data2 = phase2.data[miss.rate.by.sample!=0, ]
boxplot(phase2.data2)
boxplot(log2(phase2.data2))
boxplot(log2(phase2.data2))
limma::plotDensities(log2(phase2.data2))
phase2.data2 = log2(t(phase2.data[miss.rate.by.sample!=0, ]))
boxplot(phase2.data2)
limma::plotDensities(phase2.data2)
phase2.meta$sext
# Prepare input
Norm.meta.input = phase2.meta %>% select(Tx, sext)
head(Norm.meta.input)
Norm.meta.input$ID = rownames(phase2.meta)
head(Norm.meta.input)
Norm.meta.input$ID = paste0("X", phase2.meta$id)
phase2.data2 = t(phase2.data[miss.rate.by.sample!=0, ])
phase2.data2[1:5, 1:5]
phase2.data2 = log2(t(phase2.data[miss.rate.by.sample!=0, ]))
# Prepare input
phase2.data3 = t(phase2.data[miss.rate.by.sample!=0, ])
dim(Norm.meta.input)
Norm.meta.input = Norm.meta.input %>% filter(ID %in% colnames(phase2.data3))
dim(Norm.meta.input)
dim(phase2.data3)
dim(phase2.data)
sum(miss.rate.by.sample==0)
#load cleaned data
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"), row.names = 1)
dim(phase2.data)
phase2.data = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-data.csv"), row.names = 1)
phase2.meta = read.csv(paste0(data.dir, "/clean_IRL-GREY-Phase-2-Clinical-BMKs-meta.csv"), row.names = 1, stringsAsFactors = TRUE)
summary(phase2.meta)
table(phase2.meta$Tx, phase2.meta$response)
miss.mat = is.na(phase2.data)
miss.rate.by.protein = colMeans(miss.mat)
# hist(miss.rate.by.protein)
quantile(miss.rate.by.protein)
miss.rate.by.sample = rowMeans(miss.mat)
# hist(miss.rate.by.sample)
quantile(miss.rate.by.sample)
sum(miss.rate.by.sample==1) #38 subjects are missing with proteins
phase2.data2 = log2(t(phase2.data))
boxplot(phase2.data2)
# Prepare input
phase2.data3 = t(phase2.data[miss.rate.by.sample!=1, ])
Norm.meta.input = phase2.meta %>% select(Tx, sext)
Norm.meta.input$ID = paste0("X", phase2.meta$id)
Norm.meta.input = Norm.meta.input %>% filter(ID %in% colnames(phase2.data3))
dim(Norm.meta.input)
write.table(data.info, paste0(job.dir, "/NormMetaInput"), row.names=FALSE, sep="\t", quote = FALSE)
write.table(Norm.meta.input, paste0(job.dir, "/NormMetaInput/design.tsv"), row.names=FALSE, sep="\t", quote = FALSE)
write.table(Norm.meta.input, paste0(job.dir, "/NormInput_design.tsv"), row.names=FALSE, sep="\t", quote = FALSE)
class(phase2.data3)
rownames(phase2.data3)
phase2.data3$protein = rownames(phase2.data3)
write.table(data2, paste0(job.dir, "/NormInput_data.tsv"), row.names = FALSE, sep="\t", quote = FALSE)
write.table(phase2.data3, paste0(job.dir, "/NormInput_data.tsv"), row.names = FALSE, sep="\t", quote = FALSE)
install.packages("NormalyzerDE")
library("NormalyzerDE")
BiocManager::install("NormalyzerDE")
?NormalyzerDE::setupRawDataObject
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = c("Tx", "sext"))
jobName <- "Phase2Norm"
dataFp = paste0(job.dir, "/NormInput_data.tsv")
designFp = paste0(job.dir, "/NormInput_design.tsv")
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = c("Tx", "sext"))
phase2.data3[1:5, 1:5]
phase2.data3
phase2.data3 = t(phase2.data[miss.rate.by.sample!=1, ])
phase2.data3[1:5, 1:4]
# library("NormalyzerDE")
# Prepare input
phase2.data3 = t(phase2.data[miss.rate.by.sample!=1, ])
# phase2.data3$protein = rownames(phase2.data3)
write.table(phase2.data3, paste0(job.dir, "/NormInput_data.tsv"), row.names = FALSE, sep="\t", quote = FALSE)
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = c("Tx", "sext"))
normObj <- NormalyzerDE::getVerifiedNormalyzerObject(jobName, experimentObj)
Norm.meta.input = phase2.meta %>% select(Tx, sext)
Norm.meta.input$Tx_sext =  paste0(Norm.meta.input$Tx, "_", Norm.meta.input$sext)
Norm.meta.input$ID = paste0("X", phase2.meta$id)
Norm.meta.input = Norm.meta.input %>% filter(ID %in% colnames(phase2.data3))
write.table(Norm.meta.input, paste0(job.dir, "/NormInput_design.tsv"), row.names=FALSE, sep="\t", quote = FALSE)
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = c("Tx", "sext"))
normObj <- NormalyzerDE::getVerifiedNormalyzerObject(jobName, experimentObj)
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = "Tx_sext")
normObj <- NormalyzerDE::getVerifiedNormalyzerObject(jobName, experimentObj)
phase2.data3 = t(phase2.data[miss.rate.by.sample!=1, ])+1
# phase2.data3$protein = rownames(phase2.data3)
write.table(phase2.data3, paste0(job.dir, "/NormInput_data.tsv"), row.names = FALSE, sep="\t", quote = FALSE)
experimentObj <- NormalyzerDE::setupRawDataObject(dataFp, designFp, "default", TRUE,
sampleColName = "ID", groupColName = "Tx_sext")
normObj <- NormalyzerDE::getVerifiedNormalyzerObject(jobName, experimentObj)
#Step 2: Generate normalizations
normResults <- normMethods(normObj)
#Step 2: Generate normalizations
normResults <- NormalyzerDE::normMethods(normObj)
#Step 3: Generate performance measures
normResultsWithEval <- NormalyzerDE::analyzeNormalizations(normResults)
#Step 4: Output matrices to file
jobDir <- setupJobDir("Phase2Norm", job.dir)
#Step 4: Output matrices to file
jobDir <- NormalyzerDE::setupJobDir("Phase2Norm", job.dir)
NormalyzerDE::writeNormalizedDatasets(normResultsWithEval, jobDir)
#Step 5: Generate evaluation plots
NormalyzerDE::generatePlots(normResultsWithEval, jobDir)
(job.dir, "/Phase2Norm/CycLoess-normalized.txt")
norm.data = read.table(job.dir, "/Phase2Norm/CycLoess-normalized.txt")
job.dir
norm.data = read.table(paste0(job.dir, "/Phase2Norm/CycLoess-normalized.txt"))
norm.data[1:5, 1:5]
norm.data = read.table(paste0(job.dir, "/Phase2Norm/CycLoess-normalized.txt"), header = TRUE)
norm.data[1:5, 1:5]
boxplot(phase2.data2)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/CircadianPipeline_private/Rshiny/")
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
#check
# ex2_two = readRDS("CircadianPipelineRShiny/test/e3/save/TOJR_Sidak_FS_p-value_0.05.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/u2e1/save/DR_parameter_Sidak_FS_p-value_0.05.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/e3/save/FormattedData.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/u2e1/save/db.rds")
# ex1 = readRDS("CircadianPipelineRShiny/test/test2/save/TOJR_VDA_p-value_0.05.rds")
ex2 = readRDS("CircadianPipelineRShiny/test/e2u2/save/FormattedData.rds")
hist(ex2$x1$rhythm$peak)
ex2$x1$rhythm$peak
ex2$x2$rhythm$peak
19.16841-24
ex2$x2$rhythm$peak[ex2$x2$rhythm$pvalue<0.05]
ex2$x1$rhythm$peak[ex2$x1$rhythm$pvalue<0.05]
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/CircadianPipeline_private/Rshiny/")
setwd("/Users/xiangningxue/Library/CloudStorage/OneDrive-UniversityofPittsburgh/Research/circadian/ThePipeline/CircadianPipeline_private/Rshiny/")
astro <- get(load("data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
astro <- get(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData")
rm(list = ls())
astro <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
names(astro)
rm(list = ls())
# astro <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
D1D2 <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
names(D1D2)
dat <- D1D2$data_CPMfiltered_log2DEseq2
meta <- D1D2$clinical
dim(dat)
dim(meta)
head(meta)
meta
dat[1:5, 1:5]
D1D2 <- load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData")
D1D2 <- load("CircadianPipelineRShiny/data/Mouse/mouse_D1D2_log2DEseq2_separate.RData")
rm(list = ls())
D1D2 <- load("CircadianPipelineRShiny/data/Mouse/mouse_D1D2_log2DEseq2_separate.RData")
# astro <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
D1D2 <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_D1D2_log2DEseq2_separate.RData"))
rm(list = ls())
# astro <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
D1D2 <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_D1D2_log2DEseq2_separate.RData"))
rm(list = ls())
# astro <- mget(load("CircadianPipelineRShiny/data/Mouse/mouse_astro_log2DEseq2_log2CPM.RData"))
load("CircadianPipelineRShiny/data/Mouse/mouse_D1D2_log2DEseq2_separate.RData")
head(clinical_D1)
library(dplyr)
head(clinical_D1)
clinical_D1 %>% mutate(SampleID = sample)
write.csv(clinical_D1 %>% mutate(SampleID = sample), "meta_D1_all.csv")
write.csv(clinical_D1 %>% mutate(SampleID = sample), "CircadianPipelineRShiny/data/Mouse/meta_D1_all.csv")
write.csv(clinical_D2 %>% mutate(SampleID = sample), "CircadianPipelineRShiny/data/Mouse/meta_D2_all.csv")
write.csv(clinical_D1 %>% mutate(SampleID = sample) %>% filter(sex == "female"),
"CircadianPipelineRShiny/data/Mouse/meta_D1_female.csv")
write.csv(clinical_D1 %>% mutate(SampleID = sample) %>% filter(sex == "male"),
"CircadianPipelineRShiny/data/Mouse/meta_D1_male.csv")
write.csv(clinical_D2 %>% mutate(SampleID = sample) %>% filter(sex == "female"),
"CircadianPipelineRShiny/data/Mouse/meta_D2_female.csv")
write.csv(clinical_D2 %>% mutate(SampleID = sample) %>% filter(sex == "male"),
"CircadianPipelineRShiny/data/Mouse/meta_D2_male.csv")
data_CPMfiltered_log2DEseq2_D1[1:5, 1:5]
head(clinical_D1)
all(clinical_D1$sample==colnames(data_CPMfiltered_log2DEseq2_D1))
all(clinical_D2$sample==colnames(data_CPMfiltered_log2DEseq2_D2))
write.csv(data_CPMfiltered_log2DEseq2_D1, "CircadianPipelineRShiny/data/Mouse/data_D1_all.csv")
write.csv(data_CPMfiltered_log2DEseq2_D2, "CircadianPipelineRShiny/data/Mouse/data_D2_all.csv")
write.csv(data_CPMfiltered_log2DEseq2_D1[,clinical_D1$sex == "female"],
"CircadianPipelineRShiny/data/Mouse/data_D1_female.csv")
write.csv(data_CPMfiltered_log2DEseq2_D1[,clinical_D1$sex == "male"],
"CircadianPipelineRShiny/data/Mouse/data_D1_male.csv")
write.csv(data_CPMfiltered_log2DEseq2_D2[,clinical_D2$sex == "female"],
"CircadianPipelineRShiny/data/Mouse/data_D2_female.csv")
write.csv(data_CPMfiltered_log2DEseq2_D2[,clinical_D2$sex == "male"],
"CircadianPipelineRShiny/data/Mouse/data_D2_male.csv")
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
#check
# ex2_two = readRDS("CircadianPipelineRShiny/test/e3/save/TOJR_Sidak_FS_p-value_0.05.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/u2e1/save/DR_parameter_Sidak_FS_p-value_0.05.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/e3/save/FormattedData.rds")
# ex2_two = readRDS("CircadianPipelineRShiny/test/u2e1/save/db.rds")
# ex1 = readRDS("CircadianPipelineRShiny/test/test2/save/TOJR_VDA_p-value_0.05.rds")
ex2 = readRDS("CircadianPipelineRShiny/test/D2_all_vs_D1_all/save/FormattedData.rds")
ex2
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
list.files("CircadianPipelineRShiny/test/male_vs_female_in_D1/save")
ex1 = readRDS("CircadianPipelineRShiny/test/male_vs_female_in_D1/save/TOJR_Sidak_FS_p-value_0.05.rds")
ex1 = readRDS("CircadianPipelineRShiny/test/male_vs_female_in_D1/save/TOJR_Sidak_FS_p-value_0.1.rds")
ex2 = readRDS("CircadianPipelineRShiny/test/male_vs_female_in_D1/save/TOJR_Sidak_FS_p-value_0.1.rds")
ex1 = readRDS("CircadianPipelineRShiny/test/male_vs_female_in_D1/save/TOJR_Sidak_FS_p-value_0.05.rds")
ex1$TOJR
ex2$TOJR
head(ex1$TOJR)
table(ex1$TOJR)
table(ex1$TOJR$TOJR)
table(ex2$TOJR$TOJR)
rm(list=ls())
shiny::runApp('CircadianPipelineRShiny', port=9987, launch.browser=T)
